// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id    String @id @unique
  email String @unique

  assets   Asset[]
  plans    Plan[]
  currency String

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model Asset {
  id           String   @id @default(uuid())
  action_asset Int?
  name         String
  value        Int
  category     String
  yoy          Float?
  yoy_advanced Float[]
  yoy_type     String
  yoy_mode     String
  note         String
  allocation   String?
  createdAt    DateTime @default(now())
  incomes      Income[]
  costs        Cost[]
  User         User     @relation(fields: [userId], references: [id])
  userId       String
}

model Income {
  id           String   @id @default(uuid())
  name         String
  value        Int
  yoy          Float?
  yoy_advanced Float[]
  yoy_type     String
  yoy_mode     String
  value_mode   String
  type         String
  Asset        Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  assetId      String
  createdAt    DateTime @default(now())
}

model Cost {
  id           String   @id @default(uuid())
  name         String
  value        Int
  yoy          Float?
  yoy_advanced Float[]
  yoy_type     String
  yoy_mode     String
  value_mode   String
  type         String
  Asset        Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  assetId      String
  createdAt    DateTime @default(now())
}

model Plan {
  id                 String   @id @default(uuid())
  name               String
  note               String
  inflation          Float?
  inflation_advanced Float[]
  inflation_mode     String
  status             String
  actions            Action[]
  createdAt          DateTime @default(now())
  User               User     @relation(fields: [userId], references: [id])
  userId             String
}

model Action {
  id        String        @id @default(uuid())
  name      String
  time      Int
  value     Int
  status    String
  assetsIn  ActionAsset[] @relation("ActionIn")
  assetOut  ActionAsset?
  createdAt DateTime      @default(now())
  Plan      Plan          @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId    String
}

model ActionAsset {
  id          String  @id @default(uuid())
  assetId     String
  type        String
  allocation  Float
  ActionIn    Action? @relation("ActionIn", fields: [actionInId], references: [id], onDelete: Cascade)
  actionInId  String?
  ActionOut   Action? @relation(fields: [actionOutId], references: [id], onDelete: Cascade)
  actionOutId String? @unique
}
